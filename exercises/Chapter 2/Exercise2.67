(decode sample-message sample-tree)

(a d a b b c a)







;; huffman tree
(define nil '())

(define (make-leaf symbol weight) (list 'leaf symbol weight))
(define (leaf? o) (eq? (car o) 'leaf))
(define (symbol-leaf o) (cadr o))
(define (weight-leaf o) (caddr o))


(define (make-code-tree left right)
	(list left right (append (symbols left) (symbols right)) (+ (weight left) (weight right))))
	
(define (symbols tree) 
	(cond ((leaf? tree) (list (symbol-leaf tree)))
		  (else (caddr tree))))
(define (weight tree)
	(cond ((leaf? tree) (weight-leaf tree))
		  (else (cadddr tree))))
(define (left-branch tree)
	(car tree))
(define (right-branch tree)
	(cadr tree))

(define (decode bits tree)
	(define (decode-inner bits branch)
		(if (null? bits)
			nil
			(let ((current-bit (car bits))
				  (bits-left (cdr bits))
				  (next-branch (choose-branch (car bits) branch)))
				  (if (leaf? next-branch)
					(cons (symbol-leaf next-branch) (decode-inner bits-left tree))
					(decode-inner bits-left next-branch)))))
	(decode-inner bits tree))
	
(define (choose-branch bit tree)
	(cond ((= bit 0) (left-branch tree))
		  ((= bit 1) (right-branch tree))
		  (else (error "bad bit:" bit))))
		  
(define (adjoin-set x set)
	(if (null? set) (list x)
		(if (< (weight x) (weight (car set)))
			(cons x set)
			(cons (car set) (adjoin-set x (cdr set))))))
			
(define (make-leaf-set pairs)
	(if (null? pairs) nil
		(let ((pair (car pairs)))
			(adjoin-set (make-leaf (car pair) (cadr pair)) (make-leaf-set (cdr pairs))))))
			

			
			
			
(define sample-tree
(make-code-tree (make-leaf 'A 4)
(make-code-tree
(make-leaf 'B 2)
(make-code-tree
(make-leaf 'D 1)
(make-leaf 'C 1)))))
(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))