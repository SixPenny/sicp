;;没有更改算法，只改了selector，constructor
;;先判断有没有+号，如果有则应用加法的微分
;;再判断有没有*号，如果有再应用乘号的微分
;;就是说优先级低的要先做微分运算
(define (differentiation expression var)
	(cond ((same-variable? expression var) 1)
		  ((constant? expression var) 0)
		  ((add? expression) (make-sum (differentiation (adder expression) var) (differentiation (addee expression) var)))
		  ((product? expression) (make-sum (make-product (multiplier expression) (differentiation (multipliee expression) var)) 
										(make-product (multipliee expression) (differentiation (multiplier expression) var))))
		   ((exponentiation? expression) 
				(make-product (make-product (exponent expression) 
									(make-exponentiation (base expression) (dec (exponent expression))))
									(differentiation (base expression) var)))))

(define (variable? x) (symbol? x))										
(define (same-variable? x y) (and (variable? x) (variable? y) (eq? x y)))
(define (constant? x y) (and (not (pair? x)) (not (same-variable? x y))))
(define (=number? x num) (and (number? x) (eq? x num)))
(define (zero? x) (=number? x 0))
(define (make-sum x y) 
	(cond ((zero? x) y)
		  ((zero? y) x)
		  ((and (number? x) (number? y)) (+ x y))
		  (else (list x '+ y))))
(define (make-product x y) 
	(cond ((or (zero? x) (zero? y)) 0)
		  ((=number? x 1) y)
		  ((=number? y 1) x)
		  (else (list x '* y))))
(define (add? e) 
	(cond ((not (pair? e)) #f)
		  ((eq? (car e) '+) #t)
		  (else (add? (cdr e)))))
(define (product? e) 
	(cond ((add? e) #f)
		  ((not (pair? e)) #f)
		  ((eq? (car e) '*) #t)
		  (else (product? (cdr e)))))


(define (adder e) (car e))
(define (addee e) 
	(cond ((= (length e) 3) (caddr e))
		  (else (cddr e))))
(define (multiplier e) (car e))
(define (multipliee e) 
	(let ((m (caddr e)))
		(cond ((not (pair? m)) (cddr e))
			  (else m))))
 
(define (exponentiation? e) (eq? '** (car e)))
(define (base e) (cadr e))
(define (exponent e) (caddr e))
(define (make-exponentiation base exponent)
	(cond ((zero? exponent) 1)
		  ((=number? exponent 1) base)
		  (else (list '** base exponent))))

(newline)
(display (differentiation '(x + 3 * (x + y + 2)) 'x))