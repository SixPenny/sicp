(define (accumulate op initial sequence)
	(if (null? sequence)
	initial
	(op (car sequence)
		(accumulate op initial (cdr sequence)))))


(define (map p sequence)
	(accumulate (lambda (x y) (cons (p x) y)) nil sequence))
(define (append seq1 seq2)
	(accumulate cons  seq1 seq2))
(define (length sequence)
	(accumulate (lambda (x y) (+ 1 y)) 0 sequence))
	
(newline)
(display (map (lambda (x) (* 2 x)) (list 1 2 3 4)))
(newline)
(display (append (list 2 3 4) (list 1 5 6)))
(newline)
(display (length (list 3 4 5 6 7)))