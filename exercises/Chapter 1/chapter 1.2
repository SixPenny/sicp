## Exercise 1.9

(define (+ a b)
	(if (= a 0) b (inc (+ (dec a) b))))   recursive
(define (+ a b)
	(if (= a 0) b (+ (dec a) (inc b))))   iterative
	
## Exercise 1.10

A(x,y)= 0  if y=0
		2y if x=0
		2  if y=1
		A(x-1,A(x,y-1))  else
f(n) = A(0,n) = 2n
g(n) = A(1,n) = 2^n
h(n) = A(2,n) = A(1 A(2,n-1)) = 2^(2^(n-1))
A(3,n) = 2^(2^(2^(n-2)))

## Exercise 1.11

Recursive process:
(define (f n) (if (< n 3) n 
	(+ (f (- n 1)) 
		(+ (* 2 (f (- n 2)))
			(* 3 (f (- n 3)))))))

Iterative process:			
(define (f-i n) (if (< n 3) n 
	(f-iter 2 1 0 n)))
(define (f-iter n-1 n-2 n-3 count) (if (< count 3) n-1 (f-iter (+ (+ n-1 (* 2 n-2)) (* 3 n-3)) n-1 n-2 (- count 1))))

计算(f 10000)需要很长时间(十几分钟没运算出来手动abort掉了) 
计算(f-i 10000) 瞬间出结果


## Exercise 1.12

以x y表示第x行第y列 (y<=x)
杨辉三角实际在pascal三角之前
(define (yh-triangle x y) 
	(cond ((= y 1) 1) 
		((= x y) 1)
		(else (+ (yh-triangle (- x 1) (- y 1)) (yh-triangle (- x 1) y)))
	))

	
## Exercise 1.15
a. 5次
b. space theta(n) steps theta(n)


## Exercise 1.16

(define (even? n) (= (remainder n 2) 0))
(define (exp b n) 
	(define (exp-iter a b n) (
		cond ((= n 1) (* a b))
			((even? n) (exp-iter a (* b b) (/ n 2)))
			(else (exp-iter (* a b) b (- n 1)))
	))
	(exp-iter 1 b n))

## Exercise 1.17

(define (* a b) 
(cond ((= b 1) a)
	((even? b) (double (* a (halve b))))
	(else (+ a (* a (- b 1)))))
	)
	
(define (double a) (+ a a))
(define (halve a) (/ a 2))

## Exercise 1.18

(define (multiply a b)
	(define (multiply-iter add a b)
	(cond ((= b 1) (+ add a))
		((even? b) (multiply-iter add (double a) (halve b)))
		(else (multiply-iter (+ add a) a (- b 1)))
	))
	(multiply-iter 0 a b)
)

## Exercise 1.19
(define (fib n)
	(fib-iter 1 0 0 1 n))
(define (fib-iter a b p q count)
	(cond ((= count 0) b)
		((even? count)
		(fib-iter a
			b
			(+ (square p) (square q))
			(+ (* 2 p q) (square q))
			(/ count 2)))
	(else (fib-iter (+ (* b q) (* a q) (* a p))
					(+ (* b p) (* a q))
					p
					q
					(- count 1)))))

## Exercise 1.22

;示例给的程序没有返回值，自己改写了一下
;scheme的最后一条语句的执行结果就是返回值

(define (smallest-divisor n) (find-divisor n 2))
(define (find-divisor n test-divisor)
	(cond ((> (square test-divisor) n) n)
		((divides? test-divisor n) test-divisor)
		(else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b) (= (remainder b a) 0))

(define (prime? n)
	(= n (smallest-divisor n)))

(define (timed-prime-test n)
	(start-prime-test n (runtime)))
(define (start-prime-test n start-time)
	(if (prime? n)
	(report-prime n (- (runtime) start-time))
	0))
(define (report-prime n elapsed-time)
	(newline)
	(display n)
	(display " *** ")
	(display elapsed-time)
	1)
	
(define (search-for-primes from to)
	(define (search num from to) 
		(cond ((= from to) 0) 
			((> num 2) 0)
			(else  (search (+ num (timed-prime-test from)) (+ from 1) to))))
	(search 0 from to))