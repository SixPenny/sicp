## Exercise 1.35

(fixed-point (lambda (x) (+ 1 (/ 1 x))) 1.0)


## Exercise 1.36

(define (fixed-point f first-guess) 
	(define (next x) (f x))
	(define (good-enough? x y) (< (abs (- x y)) 0.00001))
	(define (try guess)
		(newline)
		(display guess)
		(if (good-enough? guess (f guess))
			 guess
			 (try (next guess))))
	(try first-guess))
	
(fixed-point (lambda (x) (/ (log 1000) (log x))) 2)

## Exercise 1.37

a. 
(define (cont-frac n d k) 
	(define (c-iter result k)
		(if (= k 1) (/ (n 1) result)
			(let ((next-k (- k 1)))
			(c-iter (+ (d next-k) (/ (n k) result)) next-k)))
	)
	(c-iter (d k) k))
validate：
(newline)
(display (cont-frac (lambda (i) 1.0) (lambda (i) 1.0) 2))
(newline)
(display (cont-frac (lambda (i) 1.0) (lambda (i) 1.0) 4))
(newline)
(display (cont-frac (lambda (i) 1.0) (lambda (i) 1.0) 8))
(newline)
(display (cont-frac (lambda (i) 1.0) (lambda (i) 1.0) 16))
so k=16 that is accurate to 4 decimal places
b.
(define (cont-frac-recursive n d k)
	(define (c-f-r start)
		(if (= start k) (/ (n k) (d k))
			(/ (n start) (+ (d start) (c-f-r (+ start 1))))))
	(c-f-r 1))
validate：
(newline)
(display (cont-frac-recursive (lambda (i) 1.0) (lambda (i) 1.0) 2))
(newline)
(display (cont-frac-recursive (lambda (i) 1.0) (lambda (i) 1.0) 4))
(newline)
(display (cont-frac-recursive (lambda (i) 1.0) (lambda (i) 1.0) 8))
(newline)
(display (cont-frac-recursive (lambda (i) 1.0) (lambda (i) 1.0) 16))

## Exercise 1.38
(define (d i) (if (= (remainder (+ i 1) 3) 0) (* (/ (+ i 1) 3) 2) 1))
Validate:
(newline)
(display (cont-frac (lambda (i) 1.0) d 2))
(newline)
(display (cont-frac (lambda (i) 1.0) d 4))
(newline)
(display (cont-frac (lambda (i) 1.0) d 8))
(newline)
(display (cont-frac (lambda (i) 1.0) d 16)) ;.71828

## Exercise 1.39
(define (tan-cf x k) 
	(define (t-iter result count)
		(if (= count 1) 
			(/ x result)
			(let ((next-c (- count 1)))
				(t-iter (- (- (* 2 next-c) 1) (/ (square x) result)) next-c))
		))
	(t-iter (- (* 2 k) 1) k))

(define pi 3.1415926)	
(newline)
(display (tan-cf pi 2))
(newline)
(display (tan-cf pi 4))
(newline)
(display (tan-cf pi 8))
(newline)
(display (tan-cf pi (square 16)))  ;almost 0

## Exercise 1.40

(define (cubic a b c) 
	(lambda (x) (+ (* x x x) (* a (square x)) (* b x) c)))

	
## Exercise 1.41

21

## Exercise 1.42

(define (compose f g) 
	(lambda (x) (f (g x))))
	
## Exercise 1.43

(define (repeated f count)
	(define (repeated-iter result count) 
		(cond ((= count 1) result)
			  (else (repeated-iter (compose f result) (- count 1)))
			  ))
	(repeated-iter f count))
	
## Exercise 1.44

(define (smooth f)
	(lambda (x) (/ (+ (f x) (f (- x dx)) (f (+ x dx))) 3)))

(define (nth-smooth f n)
	(lambda (x)(repeated (smooth f) n)))
	
## Exercise 1.46

(define (iterative-improve good? improve)
	(define (util-good-enough guess)
		(if (good? guess) 
			guess
			(util-good-enough (improve guess))))
	(lambda (x) (util-good-enough x))
	)